# -------------------------------------
# Snakefile: set up and module organization
# -------------------------------------
import pandas as pd


# Load sample information and validate
configfile: "config/config.yaml"


samples_df = pd.read_csv(config["samples_df"], sep="\t")
groups = list(set(samples_df["group"]))
samples_df["group_sample"] = samples_df["group"] + "_" + samples_df["sample"]
group_to_group_sample_dictionary = (
    samples_df.groupby(["group"])["group_sample"].apply(list).to_dict()
)

# load results path
results = config["results"]


# load report
report: "../report/workflow.rst"


# load container for miniconda
container: "docker://condaforge/mambaforge:4.14.0-0"


# -------------------------------------
# Modularization: rules to include
# -------------------------------------
include: "rules/01_read_preprocessing.smk"
include: "rules/02_virus_enrichment.smk"
include: "rules/03_read_assembly.smk"
include: "rules/04_virus_identification.smk"
include: "rules/05_virus_quality.smk"
include: "rules/06_virus_dereplication.smk"
include: "rules/07_virus_diversity.smk"
include: "rules/08_virus_host.smk"
include: "rules/09_virus_taxonomy.smk"
include: "rules/10_virus_lifestyle.smk"
include: "rules/11_virus_function.smk"
include: "rules/12_virus_abundance.smk"
include: "rules/13_host_abundance.smk"
include: "rules/14_provirus_activity.smk"


# -------------------------------------
# Pipeline outputs
# -------------------------------------
localrules:
    summary,
    all,


def get_final_output(wildcards):

    final_output = []

    if config["input_data"] == "reads":
        final_output.append(results + "01_READ_PREPROCESSING/fastp_multiqc_report.html")
        final_output.append(results + "01_READ_PREPROCESSING/kneaddata_analysis.html")

    if config["include_enrichment_module"]:
        final_output.append(results + "02_VIRUS_ENRICHMENT/virus_enrichment_figure.svg")

    if config["input_data"] == "reads":
        final_output.append(results + "03_READ_ASSEMBLY/quast_multiqc_report.html")

    if config["input_data"] == "reads" or config["input_data"] == "contigs":
        final_output.append(
            results + "04_VIRUS_IDENTIFICATION/virus_identification_boxplot.svg"
        )

    if (
        config["input_data"] == "reads"
        or config["input_data"] == "contigs"
        or config["input_data"] == "vls"
    ):
        final_output.append(results + "05_VIRUS_QUALITY/virus_quality_figure.svg")

    final_output.append(
        results + "06_VIRUS_DEREPLICATION/virus_dereplication_figure.svg"
    )

    final_output.append(results + "07_VIRUS_DIVERSITY/virus_diversity_votu_figure.svg")

    if config["include_host_module"]:
        final_output.append(results + "08_VIRUS_HOST/virus_host_taxonomy_figure.svg")

    if config["include_taxonomy_module"]:
        final_output.append(results + "09_VIRUS_TAXONOMY/virus_taxonomy_figure.svg")

    if config["include_lifestyle_module"]:
        final_output.append(results + "10_VIRUS_LIFESTYLE/virus_lifestyle_figure.svg")

    if config["include_function_module"]:
        final_output.append(
            results + "11_VIRUS_FUNCTION/02_dramv/distillate/product.html"
        )

    if config["include_analysis_module"]:
        final_output.append(results + "12_VIRUS_ABUNDANCE/bowtie2_multiqc.html")
        final_output.append(
            results
            # + "12_VIRUS_ABUNDANCE/02_instrain_profile/combined_genome_info_w_abundance.tsv"
        )
        final_output += expand(
            results
            + "12_VIRUS_ABUNDANCE/03_instrain_compare/{group}/output/{group}_genomeWide_compare.tsv",
            group=groups,
        )

    if config["include_host_abundance_module"]:
        final_output.append(
            results + "13_HOST_ABUNDANCE/metaphlan_merged_profiles_gtdb.tsv",
        )

    if config["include_activity_module"]:
        final_output += expand(
            results + "14_PROVIRUS_ACTIVITY/01_propagate/{group}_combined_output.tsv",
            group=groups,
        )

    return final_output


rule all:
    input:
        # results + "phide_piper_report.tsv",
        get_final_output,


def get_reports(wildcards):
    reports = {}
    if config["include_enrichment_module"]:
        reports["enrichment"] = (
            results + "02_VIRUS_ENRICHMENT/virus_enrichment_report.tsv"
        )
    if config["input_data"] == "reads":
        reports["read_count"] = (
            results + "01_READ_PREPROCESSING/kneaddata_read_counts.tsv"
        )
        reports["assembly"] = results + "03_READ_ASSEMBLY/assembly_report.tsv"
    if config["input_data"] == "reads" or config["input_data"] == "contigs":
        reports["identification"] = (
            results + "04_VIRUS_IDENTIFICATION/virus_identification_report.tsv"
        )
    if (
        config["input_data"] == "reads"
        or config["input_data"] == "contigs"
        or config["input_data"] == "vls"
    ):
        reports["quality"] = results + "05_VIRUS_QUALITY/virus_quality_report.tsv"
    reports["dereplication"] = (
        results + "06_VIRUS_DEREPLICATION/virus_dereplication_report.tsv"
    )
    reports["diversity"] = (
        results + "07_VIRUS_DIVERSITY/01_votu_clustering/votu_clusters.tsv"
    )
    if config["include_host_module"]:
        reports["host"] = results + "08_VIRUS_HOST/virus_host_taxonomy_report.tsv"

    if config["include_taxonomy_module"]:
        reports["taxonomy"] = results + "09_VIRUS_TAXONOMY/virus_taxonomy_report.tsv"

    if config["include_lifestyle_module"]:
        reports["lifestyle"] = results + "10_VIRUS_LIFESTYLE/virus_lifestyle_report.tsv"

    if config["include_function_module"]:
        reports["function"] = (
            results + "11_VIRUS_FUNCTION/02_dramv/distillate/product.html"
        )

    if config["include_analysis_module"]:
        reports["analysis"] = (
            results + "12_VIRUS_ABUNDANCE/02_instrain_profile/combined_genome_info.tsv",
        )
    return reports


rule summary:
    input:
        unpack(get_reports),
        samples=config["samples_df"],
    output:
        results + "phide_piper_report.tsv",
    params:
        include_enrichment=config["include_enrichment_module"],
        input_data=config["input_data"],
        include_host=config["include_host_module"],
        include_taxonomy=config["include_taxonomy_module"],
        include_lifestyle=config["include_lifestyle_module"],
        include_function=config["include_function_module"],
        include_analysis=config["include_analysis_module"],
    conda:
        "envs/jupyter.yml"
    benchmark:
        "benchmark/summary.tsv"
    resources:
        runtime="00:10:00",
        mem_mb="10000",
    script:
        "scripts/phide_piper_summary.py"
